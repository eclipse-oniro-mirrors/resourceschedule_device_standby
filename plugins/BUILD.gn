# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import(
    "//foundation/resourceschedule/device_standby/standby_service.gni")

config("standby_plugin_config") {
  include_dirs = [
    "${standby_plugins_path}/ext/include",
    "${standby_service_constraints_path}/include",
    "${standby_service_message_listener_path}/include",
    "${standby_service_standby_state_path}/include",
    "${standby_service_strategy_path}/include",
    "${standby_utils_common_path}/include",
    "${standby_utils_policy_path}/include",
  ]
}

ohos_shared_library("standby_plugin") {
  sources = [
    "${standby_service_constraints_path}/src/charge_state_monitor.cpp",
    "${standby_service_constraints_path}/src/constraint_manager_adapter.cpp",
    "${standby_service_constraints_path}/src/motion_sensor_monitor.cpp",
    "${standby_service_message_listener_path}/src/background_task_listener.cpp",
    "${standby_service_message_listener_path}/src/common_event_listener.cpp",
    "${standby_service_message_listener_path}/src/input_manager_listener.cpp",
    "${standby_service_message_listener_path}/src/listener_manager_adapter.cpp",
    "${standby_plugins_path}/ext/src/base_state.cpp",
    "${standby_plugins_path}/ext/src/istate_manager_adapter.cpp",
    "${standby_service_standby_state_path}/src/dark_state.cpp",
    "${standby_service_standby_state_path}/src/export_plugin.cpp",
    "${standby_service_standby_state_path}/src/maintenance_state.cpp",
    "${standby_service_standby_state_path}/src/nap_state.cpp",
    "${standby_service_standby_state_path}/src/sleep_state.cpp",
    "${standby_service_standby_state_path}/src/state_manager_adapter.cpp",
    "${standby_service_standby_state_path}/src/working_state.cpp",
    "${standby_service_strategy_path}/src/base_network_strategy.cpp",
    "${standby_service_strategy_path}/src/network_strategy.cpp",
    "${standby_service_strategy_path}/src/running_lock_strategy.cpp",
    "${standby_service_strategy_path}/src/strategy_manager_adapter.cpp",
  ]

  public_configs = [ ":standby_plugin_config" ]

  public_deps = [
    "${standby_service_frameworks_path}:standby_fwk",
    "${standby_service_path}:standby_service",
    "${standby_utils_common_path}:standby_utils_common",
    "${standby_utils_policy_path}:standby_utils_policy",
  ]

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:app_manager",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "access_token:libtokenid_sdk",
    "battery_manager:batterysrv_client",
    "c_utils:utils",
    "call_manager:tel_call_manager_api",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "init:libbegetutil",
    "input:libmmi-client",
    "ipc:ipc_single",
    "netmanager_base:net_policy_manager_if",
    "power_manager:powermgr_client",
    "samgr:samgr_proxy",
    "sensor:sensor_interface_native",
    "time_service:time_client",
    "work_scheduler:workschedclient",
    "wifi:wifi_sdk",
  ]

  defines = []
  if (enable_standby_configpolicy) {
    external_deps += [ "config_policy:configpolicy_util" ]
    defines += [ "STANDBY_CONFIG_POLICY_ENABLE" ]
  }

  if (enable_background_task_mgr) {
    external_deps += [ "background_task_mgr:bgtaskmgr_innerkits" ]
    defines += [ "ENABLE_BACKGROUND_TASK_MGR" ]
  }

  subsystem_name = "resourceschedule"
  part_name = "${standby_service_part_name}"
}

config("standby_service_state_plugin_config") {
  include_dirs = [
    "${standby_plugins_path}/ext/include",
    "${standby_service_standby_state_path}/include",
    "${standby_utils_common_path}/include",
    "${standby_utils_policy_path}/include",
  ]
}
