/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

sequenceable allow_info..OHOS.DevStandbyMgr.AllowInfo;
sequenceable resource_request..OHOS.DevStandbyMgr.ResourceRequest;
interface OHOS.DevStandbyMgr.IStandbyServiceSubscriber;
interface OHOS.DevStandbyMgr.IStandbyService {
    void SubscribeStandbyCallback([in] IStandbyServiceSubscriber subscriber, [in] String subscriberName, [in] String moduleName);
    void UnsubscribeStandbyCallback([in] IStandbyServiceSubscriber subscriber);
    void ApplyAllowResource([in] ResourceRequest resourceRequest);
    void UnapplyAllowResource([in] ResourceRequest resourceRequest);
    void GetAllowList([in] unsigned int allowType, [out] AllowInfo[] allowInfoList, [in] unsigned int reasonCode);
    void GetRestrictList([in] unsigned int restrictType, [out] AllowInfo[] restrictInfoList, [in] unsigned int reasonCode);
    void ReportWorkSchedulerStatus([in] boolean started, [in] int uid, [in] String bundleName);
    void IsStrategyEnabled([in] String strategyName, [out] boolean isEnabled);
    void ReportDeviceStateChanged([in] int type, [in] boolean enabled);
    void IsDeviceInStandby([out] boolean isStandby);
    void SetNatInterval([in] unsigned int type, [in] boolean enable, [in] unsigned int interval);
    void HandleEvent([in] unsigned int resType, [in] long value, [in] String sceneInfo);
    void ReportPowerOverused([in] String module, [in] unsigned int level);
}
